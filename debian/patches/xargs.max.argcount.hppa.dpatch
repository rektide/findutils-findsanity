#! /bin/sh /usr/share/dpatch/dpatch-run
## xargs.max.argcount.hppa.dpatch by  <ametzler@downhill.at.eu.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: hppa requires a stricter limits on the maximum number of arguments
## DP: Pulled fron upstream CVS

@DPATCH@
diff -urNad findutils-4.2.26/lib/buildcmd.c /tmp/dpep.ugBeaj/findutils-4.2.26/lib/buildcmd.c
--- findutils-4.2.26/lib/buildcmd.c	2005-11-19 21:25:21.000000000 +0100
+++ /tmp/dpep.ugBeaj/findutils-4.2.26/lib/buildcmd.c	2005-12-03 12:01:01.312686344 +0100
@@ -74,6 +74,8 @@
 /* for sysconf() */
 #include <unistd.h>
 
+#include <assert.h>
+
 /* COMPAT:  SYSV version defaults size (and has a max value of) to 470.
    We try to make it as large as possible. */
 #if !defined(ARG_MAX) && defined(_SC_ARG_MAX)
@@ -118,7 +120,12 @@
   char *p;
   int bytes_left = ctl->arg_max - 1;	/* Bytes left on the command line.  */
   int need_prefix;
-  
+
+  /* XXX: on systems lacking an upper limit for exec args, ctl->arg_max
+   *      may have been set to LONG_MAX (see bc_get_arg_max()).  Hence
+   *      this xmalloc call may be a bad idea, especially since we are
+   *      adding 1 to it...
+   */
   if (!insertbuf)
     insertbuf = (char *) xmalloc (ctl->arg_max + 1);
   p = insertbuf;
@@ -183,6 +190,31 @@
 }
 
 
+/* Return nonzero if there would not be enough room for an additional
+ * argument.  We check the total number of arguments only, not the space
+ * occupied by those arguments.
+ *
+ * If we return zero, there still may not be enough room for the next
+ * argument, depending on its length.
+ */
+static int 
+bc_argc_limit_reached(int initial_args, 
+		      const struct buildcmd_control *ctl,
+		      struct buildcmd_state *state)
+{
+  /* Check to see if we about to exceed a limit set by xargs' -n option */
+  if (!initial_args && ctl->args_per_exec &&
+      ( (state->cmd_argc - ctl->initial_argc) == ctl->args_per_exec))
+    return 1;
+
+  /* We deliberately use an equality test here rather than >= in order
+   * to force a software failure if the code is modified in such a way
+   * that it fails to call this function for every new argument.
+   */
+  return state->cmd_argc == ctl->max_arg_count;
+}
+
+
 /* Add ARG to the end of the list of arguments `cmd_argv' to pass
    to the command.
    LEN is the length of ARG, including the terminating null.
@@ -211,8 +243,8 @@
 	    error (1, 0, _("argument list too long"));
 	  do_exec (ctl, state);
 	}
-      if (!initial_args && ctl->args_per_exec &&
-	  state->cmd_argc - ctl->initial_argc == ctl->args_per_exec)
+      
+      if (bc_argc_limit_reached(initial_args, ctl, state))
 	do_exec (ctl, state);
     }
 
@@ -250,10 +282,7 @@
        * conditional on arg!=NULL, since do_exec() 
        * actually calls bc_push_arg(ctl, state, NULL, 0, false).
        */
-      if ((!initial_args
-          && ctl->args_per_exec
-          && (state->cmd_argc - ctl->initial_argc) == ctl->args_per_exec)
-         || state->cmd_argc == ARG_MAX / sizeof (void *) - 1)
+      if (bc_argc_limit_reached(initial_args, ctl, state))
 	do_exec (ctl, state);
     }
 
@@ -343,8 +372,14 @@
 void
 bc_init_controlinfo(struct buildcmd_control *ctl)
 {
+  long arg_max = bc_get_arg_max();
+  assert(arg_max > 0);
+  
   ctl->exit_if_size_exceeded = 0;
-  ctl->arg_max = bc_get_arg_max() - 2048; /* a la xargs */
+  ctl->arg_max = arg_max - 2048; /* a la xargs */
+  /* need to subtract 2 on the following line - for Linux/PPC */
+  ctl->max_arg_count = (arg_max / sizeof(void*)) - 2;
+  assert(ctl->max_arg_count > 0);
   ctl->rplen = 0u;
   ctl->replace_pat = NULL;
   ctl->initial_argc = 0;
@@ -362,7 +397,13 @@
   state->cmd_argv_chars = 0;
   state->cmd_argv = NULL;
   state->cmd_argv_alloc = 0;
+  
+  /* XXX: the following memory allocation is inadvisable on systems
+   * with no ARG_MAX, because ctl->arg_max may actually be LONG_MAX.
+   * Also, adding one to that is a bad idea.
+   */
   state->argbuf = (char *) xmalloc (ctl->arg_max + 1);
+  
   state->cmd_argv_chars = state->cmd_initial_argv_chars = 0;
   state->todo = 0;
   state->usercontext = context;
Index: lib/buildcmd.h
===================================================================
RCS file: /cvsroot/findutils/findutils/lib/buildcmd.h,v
retrieving revision 1.5
retrieving revision 1.5.4.2
diff -u -r1.5 -r1.5.4.2
--- findutils-4.2.26/lib/buildcmd.h	7 Jun 2005 22:24:56 -0000	1.5
+++ findutils-4.2.26/lib/buildcmd.h	24 Nov 2005 01:38:37 -0000	1.5.4.2
@@ -57,6 +57,18 @@
   
   /* The maximum number of characters that can be used per command line.  */
   long arg_max;
+
+  /* max_arg_count: the maximum number of arguments that can be used.
+   *
+   * Many systems include the size of the pointers in ARG_MAX.
+   * Linux on PPC fails if we just subtract 1 here.
+   *
+   * However, not all systems define ARG_MAX.  Our bc_get_arg_max()
+   * function returns a useful value even if ARG_MAX is not defined.
+   * However, sometimes, max_arg_count is LONG_MAX!
+   */
+  long max_arg_count;
+
   
   /* The length of `replace_pat'.  */
   size_t rplen;
@@ -78,7 +90,7 @@
   long lines_per_exec;		/* 0 */
   
   /* The maximum number of arguments to use per command line.  */
-  long args_per_exec;		/* 1024 */
+  long args_per_exec;
 };
 
 
